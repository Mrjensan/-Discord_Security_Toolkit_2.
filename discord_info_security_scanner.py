#!/usr/bin/env python3
"""
Discord Information Security Scanner v2.0
Desenvolvido por Jensan - https://github.com/
Ferramenta educacional para an√°lise de seguran√ßa de informa√ß√µes Discord

AVISO: Use apenas para fins educacionais e an√°lise √©tica!
Esta ferramenta analisa informa√ß√µes publicamente dispon√≠veis para fins de seguran√ßa.
"""

import requests
import json
import re
import time
from datetime import datetime
from urllib.parse import urlparse

class DiscordInfoSecurityScanner:
    def __init__(self):
        self.base_url = "https://discord.com"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': f'Discord-Info-Security-Scanner/2.0 (by Jensan)'
        })
        self.version = "2.0"
        self.author = "Jensan"
        self.github = "https://github.com/"

    def display_banner(self):
        """Exibe banner da ferramenta"""
        banner = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        Discord Information Security Scanner v{self.version}          ‚ïë
‚ïë                    Criado por {self.author}                          ‚ïë
‚ïë                 {self.github}                   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                              ‚ïë
‚ïë  üîç Scanner de Informa√ß√µes P√∫blicas Discord                 ‚ïë
‚ïë  üõ°Ô∏è An√°lise de Seguran√ßa e Privacidade                      ‚ïë
‚ïë  üìä Relat√≥rios de Exposi√ß√£o de Dados                        ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(banner)

    def scan_invite_security(self, invite_code):
        """
        Escaneia informa√ß√µes de seguran√ßa em convites Discord
        """
        # Remove URL se fornecida completa
        if '/' in invite_code:
            invite_code = invite_code.split('/')[-1]

        url = f"{self.base_url}/api/v9/invites/{invite_code}"

        scan_report = {
            "scan_info": {
                "scanner": self.author,
                "version": self.version,
                "github": self.github,
                "scan_timestamp": datetime.now().isoformat(),
                "scan_type": "Public Invite Analysis"
            },
            "invite_code": invite_code,
            "security_analysis": {}
        }

        try:
            response = self.session.get(url, timeout=10)

            if response.status_code == 200:
                data = response.json()

                # Extrai informa√ß√µes expostas
                guild_info = data.get("guild", {})
                channel_info = data.get("channel", {})
                inviter_info = data.get("inviter", {})

                exposed_data = {
                    "guild_information": {
                        "name": guild_info.get("name"),
                        "id": guild_info.get("id"),
                        "description": guild_info.get("description"),
                        "member_count": data.get("approximate_member_count"),
                        "online_count": data.get("approximate_presence_count"),
                        "verification_level": guild_info.get("verification_level"),
                        "has_vanity_url": bool(guild_info.get("vanity_url_code"))
                    },
                    "channel_information": {
                        "name": channel_info.get("name"),
                        "type": channel_info.get("type"),
                        "id": channel_info.get("id")
                    },
                    "inviter_information": {
                        "username": inviter_info.get("username"),
                        "discriminator": inviter_info.get("discriminator"),
                        "id": inviter_info.get("id"),
                        "has_avatar": bool(inviter_info.get("avatar"))
                    },
                    "invite_metadata": {
                        "expires_at": data.get("expires_at"),
                        "created_at": data.get("created_at"),
                        "uses": data.get("uses"),
                        "max_uses": data.get("max_uses")
                    }
                }

                # An√°lise de seguran√ßa
                security_assessment = self._assess_invite_security(exposed_data)

                scan_report.update({
                    "scan_status": "‚úÖ Convite encontrado e analisado",
                    "exposed_data": exposed_data,
                    "security_analysis": security_assessment
                })

            elif response.status_code == 404:
                scan_report.update({
                    "scan_status": "‚ùå Convite n√£o encontrado",
                    "message": "Convite pode ter expirado ou ser inv√°lido",
                    "security_note": "Convites inexistentes s√£o seguros por defini√ß√£o"
                })

            elif response.status_code == 429:
                scan_report.update({
                    "scan_status": "‚è±Ô∏è Rate limit atingido", 
                    "message": "Aguarde antes de tentar novamente",
                    "recommendation": "Respeite os limites da API"
                })

            else:
                scan_report.update({
                    "scan_status": f"‚ö†Ô∏è Resposta inesperada: HTTP {response.status_code}",
                    "message": "Verifica√ß√£o manual necess√°ria"
                })

        except Exception as e:
            scan_report.update({
                "scan_status": "‚ùå Erro no escaneamento",
                "error": str(e),
                "error_type": type(e).__name__
            })

        return scan_report

    def _assess_invite_security(self, exposed_data):
        """
        Avalia seguran√ßa das informa√ß√µes expostas
        """
        security_issues = []
        privacy_concerns = []
        recommendations = []

        guild_info = exposed_data.get("guild_information", {})
        inviter_info = exposed_data.get("inviter_information", {})

        # Analisa exposi√ß√£o do servidor
        if guild_info.get("description"):
            privacy_concerns.append("Descri√ß√£o do servidor exposta publicamente")

        if guild_info.get("has_vanity_url"):
            privacy_concerns.append("URL personalizada exposta")

        member_count = guild_info.get("member_count", 0)
        if member_count and member_count > 10000:
            security_issues.append(f"Servidor grande ({member_count:,} membros) - alvo atrativo")
        elif member_count and member_count < 10:
            privacy_concerns.append("Servidor muito pequeno - pode ser privado")

        # Analisa exposi√ß√£o do criador do convite
        if inviter_info.get("username"):
            privacy_concerns.append("Informa√ß√µes do criador do convite expostas")
            recommendations.append("Considere criar convites an√¥nimos quando poss√≠vel")

        # Calcula score de privacidade (0-100)
        privacy_score = 100
        privacy_score -= len(security_issues) * 20
        privacy_score -= len(privacy_concerns) * 10
        privacy_score = max(privacy_score, 0)

        # Determina n√≠vel de risco
        if privacy_score >= 80:
            risk_level = "üü¢ BAIXO"
        elif privacy_score >= 60:
            risk_level = "üü° M√âDIO"
        elif privacy_score >= 40:
            risk_level = "üü† ALTO"
        else:
            risk_level = "üî¥ CR√çTICO"

        # Recomenda√ß√µes gerais
        base_recommendations = [
            "üìù Revise configura√ß√µes de privacidade do servidor",
            "üîç Monitore quem cria convites p√∫blicos",
            "‚è∞ Use convites tempor√°rios quando poss√≠vel",
            "üõ°Ô∏è Configure n√≠veis de verifica√ß√£o adequados"
        ]

        recommendations.extend(base_recommendations)

        return {
            "privacy_score": privacy_score,
            "risk_level": risk_level,
            "security_issues": security_issues,
            "privacy_concerns": privacy_concerns,
            "recommendations": recommendations,
            "total_issues": len(security_issues) + len(privacy_concerns)
        }

    def scan_guild_widget_security(self, guild_id):
        """
        Escaneia seguran√ßa do widget p√∫blico do servidor
        """
        url = f"{self.base_url}/api/guilds/{guild_id}/widget.json"

        scan_report = {
            "scan_info": {
                "scanner": self.author,
                "version": self.version,
                "github": self.github,
                "scan_timestamp": datetime.now().isoformat(),
                "scan_type": "Guild Widget Security Analysis"
            },
            "guild_id": guild_id
        }

        try:
            response = self.session.get(url, timeout=10)

            if response.status_code == 200:
                data = response.json()

                # Analisa exposi√ß√£o de dados
                exposed_channels = data.get("channels", [])
                exposed_members = data.get("members", [])

                channel_exposure = []
                for channel in exposed_channels[:10]:  # Limita output
                    channel_exposure.append({
                        "name": channel.get("name"),
                        "id": channel.get("id"),
                        "position": channel.get("position")
                    })

                member_exposure = []
                for member in exposed_members[:10]:  # Limita output  
                    member_exposure.append({
                        "username": member.get("username"),
                        "id": member.get("id"),
                        "status": member.get("status"),
                        "discriminator": member.get("discriminator")
                    })

                # An√°lise de seguran√ßa
                security_assessment = self._assess_widget_security(
                    len(exposed_channels), len(exposed_members), data
                )

                scan_report.update({
                    "scan_status": "‚ö†Ô∏è Widget p√∫blico habilitado",
                    "server_info": {
                        "name": data.get("name"),
                        "id": data.get("id")
                    },
                    "exposure_analysis": {
                        "channels_exposed": len(exposed_channels),
                        "members_exposed": len(exposed_members),
                        "sample_channels": channel_exposure,
                        "sample_members": member_exposure
                    },
                    "security_analysis": security_assessment
                })

            elif response.status_code == 403:
                scan_report.update({
                    "scan_status": "‚úÖ Widget desabilitado",
                    "message": "Configura√ß√£o segura - widget p√∫blico desabilitado",
                    "security_note": "Esta √© a configura√ß√£o recomendada para privacidade"
                })

            else:
                scan_report.update({
                    "scan_status": f"‚ö†Ô∏è Resposta inesperada: HTTP {response.status_code}",
                    "message": "Widget pode estar desabilitado ou servidor inacess√≠vel"
                })

        except Exception as e:
            scan_report.update({
                "scan_status": "‚ùå Erro no escaneamento",
                "error": str(e)
            })

        return scan_report

    def _assess_widget_security(self, channel_count, member_count, widget_data):
        """
        Avalia seguran√ßa do widget p√∫blico
        """
        security_issues = []
        recommendations = []

        # Avalia exposi√ß√£o de membros
        if member_count > 0:
            security_issues.append(f"Lista de {member_count} membros exposta publicamente")
            recommendations.append("üö® CR√çTICO: Desabilite exposi√ß√£o de membros")

        # Avalia exposi√ß√£o de canais
        if channel_count > 5:
            security_issues.append(f"Estrutura de {channel_count} canais exposta")
            recommendations.append("üîç Revise quais canais devem ser p√∫blicos")

        # Verifica se h√° convite instant√¢neo
        if widget_data.get("instant_invite"):
            security_issues.append("Convite instant√¢neo dispon√≠vel no widget")
            recommendations.append("‚ö†Ô∏è Monitore uso do convite autom√°tico")

        # Calcula score de seguran√ßa
        security_score = 100
        security_score -= len(security_issues) * 25
        security_score = max(security_score, 0)

        # Determina n√≠vel de risco
        if security_score >= 80:
            risk_level = "üü¢ BAIXO"
        elif security_score >= 60:
            risk_level = "üü° M√âDIO"  
        else:
            risk_level = "üî¥ ALTO"

        # Recomenda√ß√µes base
        base_recommendations = [
            "üõ°Ô∏è Considere desabilitar widget p√∫blico",
            "üë• Nunca exponha lista de membros",
            "üìã Limite canais vis√≠veis no widget",
            "üîÑ Revise configura√ß√µes regularmente"
        ]

        recommendations.extend(base_recommendations)

        return {
            "security_score": security_score,
            "risk_level": risk_level,
            "security_issues": security_issues,
            "recommendations": recommendations,
            "widget_enabled": True,
            "members_exposed": member_count > 0,
            "channels_exposed": channel_count > 0
        }

    def comprehensive_security_scan(self, targets):
        """
        Realiza escaneamento abrangente de m√∫ltiplos alvos
        """
        comprehensive_report = {
            "scan_suite_info": {
                "scanner": self.author,
                "version": self.version,
                "github": self.github,
                "suite_timestamp": datetime.now().isoformat(),
                "total_targets": len(targets)
            },
            "individual_scans": [],
            "consolidated_analysis": {}
        }

        high_risk_count = 0
        total_issues = 0

        for target in targets:
            print(f"üîç Escaneando: {target}")

            # Determina tipo de alvo e escaneia apropriadamente
            if target.startswith(('http', 'discord.gg', 'discord.com')):
                # √â um convite
                invite_code = target.split('/')[-1]
                scan_result = self.scan_invite_security(invite_code)
                scan_result["target_type"] = "invite"

            elif len(target) > 15 and target.isdigit():
                # √â um Guild ID
                scan_result = self.scan_guild_widget_security(target)
                scan_result["target_type"] = "guild_widget"

            else:
                # Tenta como c√≥digo de convite
                scan_result = self.scan_invite_security(target)
                scan_result["target_type"] = "invite"

            comprehensive_report["individual_scans"].append(scan_result)

            # Contabiliza para an√°lise consolidada
            if "security_analysis" in scan_result:
                risk_level = scan_result["security_analysis"].get("risk_level", "")
                if "ALTO" in risk_level or "CR√çTICO" in risk_level:
                    high_risk_count += 1
                total_issues += scan_result["security_analysis"].get("total_issues", 0)

            # Pausa respeitosa entre escaneamentos
            time.sleep(2)

        # An√°lise consolidada
        comprehensive_report["consolidated_analysis"] = {
            "high_risk_targets": high_risk_count,
            "total_security_issues": total_issues,
            "average_issues_per_target": total_issues / len(targets) if targets else 0,
            "overall_security_posture": self._assess_overall_security(high_risk_count, len(targets)),
            "top_recommendations": self._get_top_security_recommendations()
        }

        return comprehensive_report

    def _assess_overall_security(self, high_risk_count, total_targets):
        """Avalia postura geral de seguran√ßa"""
        if high_risk_count == 0:
            return "üü¢ BOA - Nenhum risco alto detectado"
        elif high_risk_count <= total_targets * 0.3:
            return "üü° MODERADA - Alguns riscos identificados"
        else:
            return "üî¥ CR√çTICA - M√∫ltiplos riscos altos detectados"

    def _get_top_security_recommendations(self):
        """Retorna recomenda√ß√µes principais de seguran√ßa"""
        return [
            "üîê Desabilite widgets p√∫blicos desnecess√°rios",
            "üë• Nunca exponha listas de membros publicamente", 
            "‚è∞ Use convites tempor√°rios sempre que poss√≠vel",
            "üõ°Ô∏è Configure n√≠veis de verifica√ß√£o adequados",
            "üîÑ Revise configura√ß√µes de privacidade regularmente",
            "üìä Monitore exposi√ß√£o de informa√ß√µes sens√≠veis"
        ]

# Exemplo de uso educacional
if __name__ == "__main__":
    print("Discord Information Security Scanner - Ferramenta Educacional")
    print(f"Desenvolvido por Jensan - https://github.com/")
    print("AVISO: Para an√°lise educacional de informa√ß√µes p√∫blicas apenas!")

    try:
        scanner = DiscordInfoSecurityScanner()
        scanner.display_banner()

        print("\nüîç Op√ß√µes de Escaneamento:")
        print("1. Escanear convite espec√≠fico")
        print("2. Escanear widget de servidor")
        print("3. Escaneamento abrangente (m√∫ltiplos alvos)")

        choice = input("\nEscolha uma op√ß√£o (1-3): ")

        if choice == "1":
            invite = input("Digite o c√≥digo/URL do convite: ")
            print(f"\nüîç Escaneando convite: {invite}")
            result = scanner.scan_invite_security(invite)

        elif choice == "2":
            guild_id = input("Digite o ID do servidor: ")
            print(f"\nüîç Escaneando widget do servidor: {guild_id}")
            result = scanner.scan_guild_widget_security(guild_id)

        elif choice == "3":
            targets_input = input("Digite alvos separados por v√≠rgula (convites/IDs): ")
            targets = [t.strip() for t in targets_input.split(",")]
            print(f"\nüîç Escaneamento abrangente de {len(targets)} alvos...")
            result = scanner.comprehensive_security_scan(targets)

        else:
            print("Op√ß√£o inv√°lida!")
            exit()

        print("\n" + "="*70)
        print("üìä RELAT√ìRIO DE SEGURAN√áA")
        print("="*70)
        print(json.dumps(result, indent=2, ensure_ascii=False))

    except KeyboardInterrupt:
        print("\n\nüëã Escaneamento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

    print(f"\nüõ°Ô∏è Obrigado por usar a ferramenta de seguran√ßa do Jensan!")
    print("‚≠ê GitHub: https://github.com/")
